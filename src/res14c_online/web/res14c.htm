<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Res14C</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@3.9.1"></script>
</head>
<body>
	<h2>Radiocarbon Dating Resolution Calculator</h2>
	<p>Calculate expected temporal resolution of radiocarbon dating based on the expected actual age of the samples.</p>
    <p>Sample age (in years AD, use negative values for BC):</p>
    <label for="lowerBound">Lower Bound:</label>
    <input type="number" id="lowerBound" value="-18000">
    <label for="upperBound">Upper Bound:</label>
    <input type="number" id="upperBound" value="1950">
    <button id="plotButton">Plot</button>
    <div><canvas id="plotContainer"></canvas></div>
    <button id="exportButton">Export Data (CSV)</button>
    <p>For an overview of the method see: Svetlik, I., A. J. T. Jull, M. Molnár, P. P. Povinec, T. Kolář, P. Demján, K. Pachnerova Brabcova, et al. “The Best Possible Time Resolution: How Precise Could a Radiocarbon Dating Method Be?” Radiocarbon 61, no. 6 (December 2019): 1729–40. <a href="https://doi.org/10.1017/RDC.2019.134">DOI: 10.1017/RDC.2019.134</a>.</p>
    <p>Radiocarbon dates are calibrated using atmospheric data from the IntCal2020 dataset by: Reimer PJ, Bard E, Bayliss A, Beck JW, Blackwell PG, Bronk Ramsey C, Buck CE, Cheng H, Edwards RL, Friedrich M, Grootes PM, Guilderson TP, Haflidason H, Hajdas I, Hatté C, Heaton TJ, Hogg AG, Hughen KA, Kaiser KF, Kromer B, Manning SW, Niu M, Reimer RW, Richards DA, Scott EM, Southon JR, Turney CSM, van der Plicht J. IntCal13 and MARINE13 radiocarbon age calibration curves 0-50000 years calBP. Radiocarbon 55(4). <a href="https://doi.org/10.2458/azu_js_rc.55.16947">DOI: 10.2458/azu_js_rc.55.16947</a></p>
    <p>The expected measurement uncertainty for 0 BP is ±15 radiocarbon years. This value grows exponentially depending on the age of the sample (see <a href="https://doi.org/10.1017/RDC.2019.134">Svetlik et al. 2019</a> for the exact formula).</p>
    <p>For the Python script used to generate the data as well as the full open source code, see <a href="https://github.com/demjanp/res14c_online">https://github.com/demjanp/res14c_online</a>.</p>
    <p>Development of this software was supported by project OP JAC "Ready for the future: understanding long-term resilience of the human culture (RES-HUM)", Reg. No. CZ.02.01.01/00/22_008/0004593 of the Ministry of Education, Youth, and Sports of the Czech Republic and EU.</p>
    <script>
        const lowerBoundInput = document.getElementById("lowerBound");
        const upperBoundInput = document.getElementById("upperBound");
        const plotButton = document.getElementById("plotButton");
        const exportButton = document.getElementById("exportButton");
        const plotContainer = document.getElementById("plotContainer");
        
        chart = 0;
        filteredData = 0

        plotButton.addEventListener("click", async () => {
            const lowerBound = parseFloat(lowerBoundInput.value);
            const upperBound = parseFloat(upperBoundInput.value);

            const response = await fetch("c14_resolution_data.csv");
            const csvData = await response.text();

            const rows = csvData.split("\n").map(row => row.split(",")); // Parse CSV data

            // Filter data and extract confidence intervals
            filteredData = rows.filter(row => {
                const x = parseFloat(row[0]);
                return x >= lowerBound && x <= upperBound;
            });

            const labels = filteredData.map(row => row[0]);
            const values = filteredData.map(row => row[1]);
            const lowerCI = filteredData.map(row => row[2]);  // Lower CI
            const upperCI = filteredData.map(row => row[3]);  // Upper CI

            // Create chart data with confidence interval areas and lines
            const chartData = {
                labels: labels,
                datasets: [{
                    label: 'Mean',
                    data: values,
                    backgroundColor: 'rgba(255, 255, 255, 0.2)',
                    borderColor: 'rgba(0, 0, 0, 1)',
                    borderWidth: 2,
                    pointRadius: 0
                }, {
                    label: '',
                    data: lowerCI,
                    backgroundColor: 'rgba(255, 255, 255, 1)', // Set fill color for CI area
                    borderColor: 'transparent', // Hide border for area
                    fill: true,
                    pointRadius: 0
                }, {
                    label: '90% Confidence Interval',
                    data: upperCI,
                    backgroundColor: 'rgba(50, 50, 50, 0.5)', // Set fill color for CI area
                    borderColor: 'transparent', // Hide border for area
                    fill: true,
                    pointRadius: 0
                }]
            };
            
            if (chart !== 0) {
				chart.destroy();
            }
            
            chart = new Chart(plotContainer, {
                type: 'line',
                data: chartData,

				options: {
					plugins: {
						title: {
							display: true,
							text: 'Expected Resolution of C-14 Dating'
						}
					},
					scales: {
						x: {
							title: {
								display: true,
								text: 'Sample Age (years AD)'
							}
						},
						y: {
							title: {
								display: true,
								text: 'Resolution (years)'
							}
						}
					}
			  }
            });
        });
    
	exportButton.addEventListener('click', () => {
		// Prepare CSV data string with headers
		const headerRow = 'Sample Age,Mean Resolution,5th Percentile Resolution,95th Percentile Resolution,Uncertainty Used\n';
		const csvContent = filteredData.map(row => row.join(",")).join("\n");
		const combinedData = headerRow + csvContent;
		
		// Create a downloadable blob
		const blob = new Blob([combinedData], { type: 'text/csv;charset=utf-8' });
		
		// Create a link element and trigger download
		const link = document.createElement("a");
		link.href = URL.createObjectURL(blob);
		link.download = 'c14_resolution_export.csv';
		link.click();
		
		// Revoke the object URL to avoid memory leaks
		URL.revokeObjectURL(link.href);
	});
    </script>
</body>
</html>
